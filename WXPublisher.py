import os
import json
import logging
import html
import re
import markdown
import mistune
from pygments import highlight
from pygments.lexers import get_lexer_by_name, TextLexer
from pygments.formatters import HtmlFormatter
from datetime import datetime, timedelta
import requests
import sys
from pathlib import Path
from typing import Optional, Dict, Any

# Â∞ùËØïÂä†ËΩΩ .env Êñá‰ª∂
try:
    from dotenv import load_dotenv
    # Âä†ËΩΩÈ°πÁõÆÊ†πÁõÆÂΩïÁöÑ .env Êñá‰ª∂
    env_path = Path(__file__).parent / '.env'
    load_dotenv(env_path)
    print(f"‚úÖ Â∑≤Â∞ùËØïÂä†ËΩΩÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂: {env_path}")
except ImportError:
    print("‚ö†Ô∏è Êú™ÂÆâË£Ö python-dotenvÔºåÊó†Ê≥ïËá™Âä®Âä†ËΩΩ .env Êñá‰ª∂")
    print("   ÂèØ‰ª•ËøêË°å: pip install python-dotenv")
except Exception as e:
    print(f"‚ö†Ô∏è Âä†ËΩΩ .env Êñá‰ª∂Êó∂Âá∫Èîô: {e}")

# ÈÖçÁΩÆÊó•Âøó
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger("weixin-publisher")


class WeixinRenderer(mistune.HTMLRenderer):
    """‰∏ìÈó®‰∏∫ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑‰ºòÂåñÁöÑËá™ÂÆö‰πâÊ∏≤ÊüìÂô® - Â¢ûÂº∫Áâà"""
    
    def __init__(self):
        super().__init__(escape=False)
        # ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑Ê†∑ÂºèÈÖçÁΩÆ - ÂÖ®Èù¢‰ºòÂåñÁâà
        self.styles = {
            'body': '''
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Arial, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", sans-serif; 
                line-height: 1.75; 
                color: #2c3e50; 
                font-size: 16px; 
                margin: 0; 
                padding: 20px; 
                background: #ffffff;
                word-wrap: break-word;
                letter-spacing: 0.5px;
            '''.strip().replace('\n', ' '),
            
            'h1': '''
                font-size: 28px; 
                font-weight: 700; 
                color: #1a1a1a; 
                margin: 40px 0 25px 0; 
                padding: 15px 20px; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-radius: 8px;
                text-align: center;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
                position: relative;
                line-height: 1.3;
            '''.strip().replace('\n', ' '),
            
            'h2': '''
                font-size: 24px; 
                font-weight: 600; 
                color: #2c3e50; 
                margin: 35px 0 20px 0; 
                padding: 12px 20px 12px 45px; 
                background: linear-gradient(90deg, #f8f9fa 0%, #ffffff 100%);
                border-left: 6px solid #e74c3c; 
                border-radius: 0 8px 8px 0;
                position: relative;
                box-shadow: 0 2px 10px rgba(231, 76, 60, 0.15);
                line-height: 1.4;
            '''.strip().replace('\n', ' ') + '''
                &::before {
                    content: "üìå";
                    position: absolute;
                    left: 15px;
                    top: 50%;
                    transform: translateY(-50%);
                    font-size: 18px;
                }
            ''',
            
            'h3': '''
                font-size: 20px; 
                font-weight: 600; 
                color: #2c3e50; 
                margin: 25px 0 15px 0; 
                padding: 10px 20px 10px 40px; 
                background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
                border-left: 5px solid #f39c12; 
                border-radius: 6px;
                position: relative;
                box-shadow: 0 2px 8px rgba(243, 156, 18, 0.2);
                line-height: 1.4;
            '''.strip().replace('\n', ' '),
            
            'h4': '''
                font-size: 18px; 
                font-weight: 600; 
                color: #2c3e50; 
                margin: 20px 0 12px 0; 
                padding: 8px 15px 8px 35px; 
                background: linear-gradient(90deg, #e8f5e8 0%, #ffffff 100%);
                border-left: 4px solid #27ae60;
                border-radius: 4px;
                position: relative;
                line-height: 1.4;
            '''.strip().replace('\n', ' '),
            
            'h5': '''
                font-size: 17px; 
                font-weight: 600; 
                color: #34495e; 
                margin: 18px 0 10px 0;
                padding: 6px 12px;
                border-bottom: 2px solid #9b59b6;
                display: inline-block;
                line-height: 1.4;
            '''.strip().replace('\n', ' '),
            
            'h6': '''
                font-size: 16px; 
                font-weight: 600; 
                color: #7f8c8d; 
                margin: 15px 0 8px 0;
                padding: 4px 8px;
                border-left: 3px solid #95a5a6;
                line-height: 1.4;
            '''.strip().replace('\n', ' '),
            
            'p': '''
                margin: 18px 0; 
                text-align: justify; 
                text-indent: 2em; 
                line-height: 1.8;
                color: #2c3e50;
                font-size: 16px;
                word-spacing: 2px;
            '''.strip().replace('\n', ' '),
            
            'blockquote': '''
                margin: 25px 0; 
                padding: 20px 25px 20px 50px; 
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                border-left: 6px solid #6c757d; 
                border-radius: 0 12px 12px 0; 
                font-style: italic; 
                color: #495057; 
                box-shadow: 0 4px 15px rgba(108, 117, 125, 0.15);
                position: relative;
                font-size: 15px;
                line-height: 1.7;
            '''.strip().replace('\n', ' '),
            
            'code_inline': '''
                background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
                color: white;
                padding: 3px 8px; 
                border-radius: 6px; 
                font-family: "SF Mono", "Monaco", "Inconsolata", "Roboto Mono", "Source Code Pro", monospace; 
                font-size: 14px; 
                margin: 0 3px;
                font-weight: 500;
                box-shadow: 0 2px 4px rgba(255, 107, 107, 0.3);
            '''.strip().replace('\n', ' '),
            
            'code_block': '''
                background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
                color: #e2e8f0; 
                padding: 25px; 
                border-radius: 12px; 
                overflow-x: auto; 
                margin: 25px 0; 
                font-family: "SF Mono", "Monaco", "Inconsolata", "Roboto Mono", "Source Code Pro", monospace; 
                font-size: 14px; 
                line-height: 1.6; 
                box-shadow: 0 8px 25px rgba(45, 55, 72, 0.3);
                border: 1px solid #4a5568;
                position: relative;
            '''.strip().replace('\n', ' '),
            
            'ul': '''
                margin: 15px 0; 
                padding-left: 0; 
                list-style: none;
            '''.strip().replace('\n', ' '),
            
            'ol': '''
                margin: 15px 0; 
                padding-left: 0; 
                list-style: none;
                counter-reset: ol-counter;
            '''.strip().replace('\n', ' '),
            
            'li': '''
                margin: 0; 
                padding: 1px 0 1px 35px; 
                position: relative; 
                list-style: none;
                line-height: 1.4;
                color: #2c3e50;
            '''.strip().replace('\n', ' '),
            
            'table': '''
                width: 100%; 
                border-collapse: collapse; 
                margin: 25px 0; 
                background: white; 
                border-radius: 12px; 
                overflow: hidden; 
                box-shadow: 0 4px 20px rgba(0,0,0,0.15);
                border: 1px solid #e9ecef;
            '''.strip().replace('\n', ' '),
            
            'th': '''
                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
                color: white; 
                padding: 15px 20px; 
                text-align: left; 
                font-weight: 600; 
                font-size: 15px;
                letter-spacing: 0.5px;
            '''.strip().replace('\n', ' '),
            
            'td': '''
                padding: 15px 20px; 
                border-bottom: 1px solid #e9ecef; 
                font-size: 14px;
                color: #2c3e50;
                line-height: 1.5;
            '''.strip().replace('\n', ' '),
            
            'tr_even': '''
                background: linear-gradient(90deg, #f8f9fa 0%, #ffffff 100%);
            '''.strip().replace('\n', ' '),
            
            'a': '''
                color: #3498db; 
                text-decoration: none; 
                border-bottom: 2px solid transparent; 
                transition: all 0.3s ease;
                font-weight: 500;
                padding: 2px 4px;
                border-radius: 4px;
            '''.strip().replace('\n', ' ') + '''
                &:hover {
                    background: rgba(52, 152, 219, 0.1);
                    border-bottom-color: #3498db;
                }
            ''',
            
            'strong': '''
                color: #e74c3c; 
                font-weight: 700;
                background: linear-gradient(135deg, rgba(231, 76, 60, 0.1) 0%, rgba(231, 76, 60, 0.05) 100%);
                padding: 2px 4px;
                border-radius: 4px;
            '''.strip().replace('\n', ' '),
            
            'em': '''
                color: #8e44ad; 
                font-style: italic;
                background: linear-gradient(135deg, rgba(142, 68, 173, 0.1) 0%, rgba(142, 68, 173, 0.05) 100%);
                padding: 2px 4px;
                border-radius: 4px;
            '''.strip().replace('\n', ' '),
            
            'hr': '''
                border: none; 
                height: 3px; 
                background: linear-gradient(90deg, transparent, #bdc3c7, transparent); 
                margin: 40px 0;
                border-radius: 2px;
            '''.strip().replace('\n', ' ')
        }
        
        # ÂàóË°®È°πÁ¨¶Âè∑ÈÖçÁΩÆ
        self.list_symbols = {
            'ul': ['üî∏', '‚ñ™Ô∏è', '‚ó¶', '‚ñ´Ô∏è'],
            'ol_styles': ['‚ë†', '‚ë°', '‚ë¢', '‚ë£', '‚ë§', '‚ë•', '‚ë¶', '‚ëß', '‚ë®', '‚ë©']
        }
        
        # ÂΩìÂâçÂàóË°®Â±ÇÁ∫ß
        self.list_level = 0
        self.ol_counter = 0
    
    def heading(self, text, level):
        """Ëá™ÂÆö‰πâÊ†áÈ¢òÊ∏≤Êüì"""
        style_key = f'h{level}'
        style = self.styles.get(style_key, self.styles['h6'])
        return f'<h{level} style="{style}">{text}</h{level}>\n'
    
    def paragraph(self, text):
        """Ëá™ÂÆö‰πâÊÆµËêΩÊ∏≤Êüì - Â¢ûÂº∫Áâà"""
        # Ê£ÄÊü•ÊòØÂê¶ÊòØÁâπÊÆäÊÆµËêΩÔºàÂ¶ÇÂåÖÂê´ÁâπÊÆäÊ†áËÆ∞Ôºâ
        if text.strip().startswith('üí°') or text.strip().startswith('‚ö†Ô∏è') or text.strip().startswith('‚ùó'):
            # ÊèêÁ§∫Ê°ÜÊ†∑ÂºèÊÆµËêΩ
            if text.strip().startswith('üí°'):
                bg_color = 'linear-gradient(135deg, #e8f5e8 0%, #f0f8f0 100%)'
                border_color = '#27ae60'
                icon = 'üí°'
            elif text.strip().startswith('‚ö†Ô∏è'):
                bg_color = 'linear-gradient(135deg, #fff3cd 0%, #fefefe 100%)'
                border_color = '#ffc107'
                icon = '‚ö†Ô∏è'
            else:  # ‚ùó
                bg_color = 'linear-gradient(135deg, #f8d7da 0%, #fefefe 100%)'
                border_color = '#dc3545'
                icon = '‚ùó'
            
            tip_style = f'''
                margin: 20px 0;
                padding: 15px 20px 15px 50px;
                background: {bg_color};
                border-left: 5px solid {border_color};
                border-radius: 0 8px 8px 0;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                position: relative;
                line-height: 1.7;
                color: #2c3e50;
                text-indent: 0;
            '''.strip().replace('\n', ' ')
            
            icon_style = '''
                position: absolute;
                left: 15px;
                top: 15px;
                font-size: 18px;
            '''.strip().replace('\n', ' ')
            
            return f'''<div style="{tip_style}">
                <span style="{icon_style}">{icon}</span>
                <div style="margin-left: 5px;">{text}</div>
            </div>\n'''
        
        return f'<p style="{self.styles["p"]}">{text}</p>\n'
    
    def block_quote(self, text):
        """Ëá™ÂÆö‰πâÂºïÁî®ÂùóÊ∏≤Êüì - Â¢ûÂº∫Áâà"""
        # ÂºïÁî®ÂõæÊ†áÊ†∑Âºè
        quote_icon_style = '''
            position: absolute;
            left: 15px;
            top: 15px;
            font-size: 24px;
            color: #6c757d;
            opacity: 0.6;
        '''.strip().replace('\n', ' ')
        
        return f'''<blockquote style="{self.styles["blockquote"]}">
            <span style="{quote_icon_style}">‚ùù</span>
            <div style="margin-left: 10px; text-indent: 0;">{text}</div>
        </blockquote>\n'''
    
    def block_code(self, code, info=None, **attrs):
        """Ëá™ÂÆö‰πâ‰ª£Á†ÅÂùóÊ∏≤Êüì - Â¢ûÂº∫ÁâàÔºåÊîØÊåÅËØ≠Ê≥ïÈ´ò‰∫Æ"""
        try:
            # info ÂèÇÊï∞ÂåÖÂê´ËØ≠Ë®Ä‰ø°ÊÅØ
            lang = info.strip() if info else None
            
            if lang:
                lexer = get_lexer_by_name(lang, stripall=True)
            else:
                lexer = TextLexer()
            
            formatter = HtmlFormatter(
                style='monokai',
                noclasses=True,
                cssclass='highlight',
                linenos=False
            )
            highlighted_code = highlight(code, lexer, formatter)
            
            # ÊèêÂèñbodyÂÜÖÂÆπÂπ∂Ê∑ªÂä†Ëá™ÂÆö‰πâÊ†∑Âºè
            import re
            body_match = re.search(r'<div[^>]*>(.*?)</div>', highlighted_code, re.DOTALL)
            if body_match:
                code_content = body_match.group(1)
            else:
                code_content = highlighted_code
            
            # ËØ≠Ë®ÄÊ†áÁ≠æÊ†∑Âºè
            lang_display = lang.upper() if lang else 'TEXT'
            lang_colors = {
                'PYTHON': '#3776ab',
                'JAVASCRIPT': '#f7df1e', 
                'JAVA': '#ed8b00',
                'HTML': '#e34c26',
                'CSS': '#1572b6',
                'SQL': '#336791',
                'JSON': '#000000',
                'BASH': '#4eaa25',
                'SHELL': '#4eaa25',
                'TEXT': '#6c757d'
            }
            lang_color = lang_colors.get(lang_display, '#6c757d')
            
            # ËØ≠Ë®ÄÊ†áÁ≠æÂõæÊ†á
            lang_icons = {
                'PYTHON': 'üêç',
                'JAVASCRIPT': '‚ö°',
                'JAVA': '‚òï',
                'HTML': 'üåê',
                'CSS': 'üé®',
                'SQL': 'üóÉÔ∏è',
                'JSON': 'üìã',
                'BASH': 'üíª',
                'SHELL': 'üíª',
                'TEXT': 'üìù'
            }
            lang_icon = lang_icons.get(lang_display, 'üìù')
            
            # Â§¥ÈÉ®Ê†∑Âºè
            header_style = f'''
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 15px;
                padding-bottom: 10px;
                border-bottom: 1px solid #4a5568;
            '''.strip().replace('\n', ' ')
            
            # ËØ≠Ë®ÄÊ†áÁ≠æÊ†∑Âºè
            lang_tag_style = f'''
                background: {lang_color};
                color: white;
                padding: 4px 12px;
                border-radius: 6px;
                font-size: 12px;
                font-weight: bold;
                letter-spacing: 0.5px;
                display: flex;
                align-items: center;
                gap: 6px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.3);
            '''.strip().replace('\n', ' ')
            
            # Â§çÂà∂ÊåâÈíÆÊ†∑Âºè
            copy_btn_style = '''
                background: #4a5568;
                color: #e2e8f0;
                border: none;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 11px;
                cursor: pointer;
                transition: all 0.2s ease;
            '''.strip().replace('\n', ' ')
            
            return f'''<div style="{self.styles['code_block']}">
                <div style="{header_style}">
                    <div style="{lang_tag_style}">
                        <span>{lang_icon}</span>
                        <span>{lang_display}</span>
                    </div>
                    <button style="{copy_btn_style}" onclick="navigator.clipboard.writeText(this.parentElement.nextElementSibling.textContent)">
                        üìã Â§çÂà∂
                    </button>
                </div>
                <div style="position: relative; overflow-x: auto;">
                    {code_content}
                </div>
            </div>\n'''
        except Exception as e:
            # Â¶ÇÊûúËØ≠Ê≥ïÈ´ò‰∫ÆÂ§±Ë¥•Ôºå‰ΩøÁî®ÁæéËßÇÁöÑÊôÆÈÄö‰ª£Á†ÅÂùó
            escaped_code = mistune.escape(code)
            lang_display = lang.upper() if lang else 'TEXT'
            
            return f'''<div style="{self.styles['code_block']}">
                <div style="margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #4a5568; color: #a0aec0; font-size: 12px; font-weight: bold;">
                    üìù {lang_display}
                </div>
                <pre style="margin: 0; white-space: pre-wrap; word-wrap: break-word;"><code>{escaped_code}</code></pre>
            </div>\n'''
    
    def codespan(self, text):
        """Ëá™ÂÆö‰πâË°åÂÜÖ‰ª£Á†ÅÊ∏≤Êüì"""
        return f'<code style="{self.styles["code_inline"]}">{mistune.escape(text)}</code>'
    
    def list(self, text, ordered, **attrs):
        """Ëá™ÂÆö‰πâÂàóË°®Ê∏≤Êüì - Â¢ûÂº∫Áâà"""
        tag = 'ol' if ordered else 'ul'
        style = self.styles[tag]
        
        if ordered:
            self.ol_counter = 0  # ÈáçÁΩÆËÆ°Êï∞Âô®
        
        # Â¢ûÂä†ÂàóË°®Â±ÇÁ∫ß
        self.list_level += 1
        result = f'<{tag} style="{style}">{text}</{tag}>'
        self.list_level -= 1
        
        return result
    
    def list_item(self, text):
        """Ëá™ÂÆö‰πâÂàóË°®È°πÊ∏≤Êüì - Â¢ûÂº∫Áâà"""
        # Ê†πÊçÆÂ±ÇÁ∫ßÈÄâÊã©‰∏çÂêåÁöÑÁ¨¶Âè∑
        level_index = min(self.list_level - 1, len(self.list_symbols['ul']) - 1)
        bullet = self.list_symbols['ul'][level_index]
        
        # ÂàõÂª∫Â∏¶ÊúâÁæéËßÇÁ¨¶Âè∑ÁöÑÂàóË°®È°π
        symbol_style = '''
            position: absolute;
            left: 10px;
            top: 1px;
            font-size: 14px;
            color: #3498db;
            font-weight: bold;
        '''.strip().replace('\n', ' ')
        
        return f'<li style="{self.styles["li"]}"><span style="{symbol_style}">{bullet}</span><div style="margin-left: 5px;">{text}</div></li>'
    
    def table(self, text):
        """Ëá™ÂÆö‰πâË°®Ê†ºÊ∏≤Êüì"""
        return f'<table style="{self.styles["table"]}">\n{text}</table>\n'
    
    def table_head(self, text):
        """Ëá™ÂÆö‰πâË°®Ê†ºÂ§¥Ê∏≤Êüì"""
        return f'<thead>\n{text}</thead>\n'
    
    def table_body(self, text):
        """Ëá™ÂÆö‰πâË°®Ê†º‰ΩìÊ∏≤Êüì"""
        return f'<tbody>\n{text}</tbody>\n'
    
    def table_row(self, text, is_head=False):
        """Ëá™ÂÆö‰πâË°®Ê†ºË°åÊ∏≤Êüì - Â¢ûÂº∫Áâà"""
        if is_head:
            return f'<tr>\n{text}</tr>\n'
        else:
            # ‰∏∫Â•áÂÅ∂Ë°åÊ∑ªÂä†‰∏çÂêåÁöÑËÉåÊôØ
            return f'<tr style="{self.styles["tr_even"]}" onmouseover="this.style.backgroundColor=\'#e3f2fd\'" onmouseout="this.style.backgroundColor=\'#f8f9fa\'">\n{text}</tr>\n'
    
    def table_cell(self, text, align=None, is_head=False):
        """Ëá™ÂÆö‰πâË°®Ê†ºÂçïÂÖÉÊ†ºÊ∏≤Êüì - Â¢ûÂº∫Áâà"""
        if is_head:
            style = self.styles['th']
            tag = 'th'
        else:
            style = self.styles['td']
            tag = 'td'
        
        align_style = f'text-align: {align};' if align else ''
        return f'<{tag} style="{style} {align_style}">{text}</{tag}>\n'
    
    def link(self, text, url, title=None):
        """Ëá™ÂÆö‰πâÈìæÊé•Ê∏≤Êüì - Â¢ûÂº∫Áâà"""
        title_attr = f' title="{mistune.escape(title)}"' if title else ''
        
        # Ê£ÄÊü•ÈìæÊé•Á±ªÂûãÂπ∂Ê∑ªÂä†Áõ∏Â∫îÂõæÊ†á
        if 'github.com' in url:
            icon = 'üîó'
        elif 'docs.' in url or 'documentation' in url:
            icon = 'üìö'
        elif url.startswith('mailto:'):
            icon = 'üìß'
        elif url.endswith(('.pdf', '.doc', '.docx')):
            icon = 'üìÑ'
        else:
            icon = 'üîó'
        
        enhanced_style = self.styles["a"] + '''
            display: inline-flex;
            align-items: center;
            gap: 4px;
        '''.strip().replace('\n', ' ')
        
        return f'<a href="{mistune.escape(url)}" style="{enhanced_style}"{title_attr}><span>{icon}</span><span>{text}</span></a>'
    
    def strong(self, text):
        """Ëá™ÂÆö‰πâÁ≤ó‰ΩìÊ∏≤Êüì - Â¢ûÂº∫Áâà"""
        return f'<strong style="{self.styles["strong"]}">‚ú® {text}</strong>'
    
    def emphasis(self, text):
        """Ëá™ÂÆö‰πâÊñú‰ΩìÊ∏≤Êüì - Â¢ûÂº∫Áâà"""
        return f'<em style="{self.styles["em"]}">üí´ {text}</em>'
    
    def thematic_break(self):
        """Ëá™ÂÆö‰πâÂàÜÈöîÁ∫øÊ∏≤Êüì - Â¢ûÂº∫Áâà"""
        decorative_style = '''
            border: none;
            height: 40px;
            background: transparent;
            margin: 40px 0;
            position: relative;
            text-align: center;
        '''.strip().replace('\n', ' ')
        
        line_style = '''
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, transparent, #bdc3c7, transparent);
            border-radius: 2px;
        '''.strip().replace('\n', ' ')
        
        diamond_style = '''
            position: relative;
            display: inline-block;
            background: white;
            padding: 0 15px;
            color: #bdc3c7;
            font-size: 20px;
            z-index: 1;
        '''.strip().replace('\n', ' ')
        
        return f'''<div style="{decorative_style}">
            <div style="{line_style}"></div>
            <span style="{diamond_style}">‚óÜ</span>
        </div>\n'''

class WeixinToken:
    def __init__(self, access_token: str, expires_in: int):
        self.access_token = access_token
        self.expires_in = expires_in
        self.expires_at = datetime.now() + timedelta(seconds=expires_in)

class ConfigManager:
    _instance = None

    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            cls._instance = ConfigManager()
        return cls._instance

    async def get(self, key: str) -> str:
        return os.getenv(key, '')

class WXPublisher:
    def __init__(self):
        """ÂàùÂßãÂåñÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÂèëÂ∏ÉÂô®"""
        self.access_token: Optional[WeixinToken] = None
        self.app_id: Optional[str] = None
        self.app_secret: Optional[str] = None
        self.config_manager = ConfigManager.get_instance()
        self.data_path = os.getenv('DATA_SAVE_PATH', './data')

    async def refresh(self) -> None:
        """Âà∑Êñ∞ÈÖçÁΩÆ‰ø°ÊÅØ"""
        self.app_id = await self.config_manager.get("WEIXIN_APP_ID")
        self.app_secret = await self.config_manager.get("WEIXIN_APP_SECRET")
        logger.info("ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÈÖçÁΩÆ: %s", {
            "appId": self.app_id,
            "appSecret": "***" + (self.app_secret[-4:] if self.app_secret else "")  # Âè™ÊòæÁ§∫ÂØÜÈí•Âêé4‰Ωç
        })

    async def ensure_access_token(self) -> str:
        """Á°Æ‰øùËÆøÈóÆ‰ª§ÁâåÊúâÊïà"""
        # Ê£ÄÊü•Áé∞ÊúâtokenÊòØÂê¶ÊúâÊïà
        if (self.access_token and 
            self.access_token.expires_at > datetime.now() + timedelta(minutes=1)):  # È¢ÑÁïô1ÂàÜÈíü‰ΩôÈáè
            return self.access_token.access_token

        try:
            await self.refresh()
            # Ëé∑ÂèñÊñ∞token
            url = f"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={self.app_id}&secret={self.app_secret}"
            response = requests.get(url).json()
            
            if 'access_token' not in response:
                raise Exception(f"Ëé∑Âèñaccess_tokenÂ§±Ë¥•: {json.dumps(response)}")

            self.access_token = WeixinToken(
                response['access_token'],
                response['expires_in']
            )
            return self.access_token.access_token

        except Exception as error:
            logger.error("Ëé∑ÂèñÂæÆ‰ø°access_tokenÂ§±Ë¥•: %s", error)
            raise

    def _preprocess_article(self, article: str) -> str:
        """È¢ÑÂ§ÑÁêÜÊñáÁ´†ÂÜÖÂÆπÔºåÁ°Æ‰øùÁºñÁ†ÅÊ≠£Á°Æ"""
        if not article:
            return ""
            
        # Á°Æ‰øùÂÜÖÂÆπÊòØÂ≠óÁ¨¶‰∏≤
        if not isinstance(article, str):
            article = str(article)
            
        # Ê£ÄÊü•ÁºñÁ†ÅÔºåÁ°Æ‰øùÊòØUTF-8
        try:
            # Â¶ÇÊûúÊòØbytesÔºåËΩ¨ÊàêÂ≠óÁ¨¶‰∏≤
            if isinstance(article, bytes):
                article = article.decode('utf-8')
                
            # Á°Æ‰øùÂèØ‰ª•ÁºñÁ†Å‰∏∫UTF-8ÔºåËøôÊ†∑ÂèØ‰ª•Ê£ÄÊµãÊΩúÂú®ÁöÑÁºñÁ†ÅÈóÆÈ¢ò
            article.encode('utf-8').decode('utf-8')
        except UnicodeError:
            logger.warning("ÊñáÁ´†ÂÜÖÂÆπÁºñÁ†ÅÊúâÈóÆÈ¢òÔºåÂ∞ùËØï‰øÆÂ§ç...")
            # Â∞ùËØï‰øÆÂ§çÁºñÁ†ÅÈóÆÈ¢ò
            try:
                # Â¶ÇÊûúÊòØbytesÔºåÂèØËÉΩÊòØÂÖ∂‰ªñÁºñÁ†ÅÔºåÂ∞ùËØï‰∏çÂêåÁöÑÁºñÁ†Å
                if isinstance(article, bytes):
                    for encoding in ['utf-8', 'gbk', 'gb2312', 'gb18030']:
                        try:
                            article = article.decode(encoding)
                            break
                        except UnicodeDecodeError:
                            continue
            except Exception as e:
                logger.error(f"‰øÆÂ§çÁºñÁ†ÅÂ§±Ë¥•: {e}")
        
        # Â§ÑÁêÜHTMLÂÆû‰ΩìÂíåÁâπÊÆäÂ≠óÁ¨¶ÁºñÁ†Å
        article = html.unescape(article)  # Â∞ÜHTMLÂÆû‰ΩìËΩ¨Êç¢ÂõûÂÆûÈôÖÂ≠óÁ¨¶
                
        # ÁßªÈô§ÂèØËÉΩÂØºËá¥ÈóÆÈ¢òÁöÑÁâπÊÆäÂ≠óÁ¨¶ÊàñÊéßÂà∂Â≠óÁ¨¶
        article = ''.join(ch for ch in article if ord(ch) >= 32 or ch in '\n\t\r')
        
        # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®‰∏≠ÊñáÂ≠óÁ¨¶ (Â¶ÇÊûúÂÖ®ÊòØËã±ÊñáÔºåÂèØËÉΩÈúÄË¶ÅÁâπÂà´Â§ÑÁêÜ)
        has_chinese = any('\u4e00' <= ch <= '\u9fff' for ch in article)
        if not has_chinese and len(article) > 50:  # ËæÉÈïøÂÜÖÂÆπ‰∏≠Ê≤°Êúâ‰∏≠ÊñáÂèØËÉΩÊòØÁºñÁ†ÅÈóÆÈ¢ò
            logger.warning("ÊñáÁ´†ÂÜÖÂÆπ‰∏≠Êú™Ê£ÄÊµãÂà∞‰∏≠ÊñáÂ≠óÁ¨¶ÔºåÂèØËÉΩÂ≠òÂú®ÁºñÁ†ÅÈóÆÈ¢ò")
            
        return article

    def _md_to_html(self, md_content: str) -> str:
        """Â∞ÜMarkdownÂÜÖÂÆπËΩ¨Êç¢‰∏∫ÁæéËßÇÁöÑHTMLÔºå‰∏ìÈó®‰∏∫ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑‰ºòÂåñ"""
        if not md_content:
            return ""
            
        # ÁßªÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑmarkdownÊ†áËÆ∞
        if 'markdown' in md_content.lower():
            # ÂéªÈô§Â∏¶ÊúâmarkdownÂ≠óÊ†∑ÁöÑË°å
            md_content = re.sub(r'^.*markdown.*$', '', md_content, flags=re.MULTILINE | re.IGNORECASE)
        
        try:
            # ‰ΩøÁî®Ëá™ÂÆö‰πâÁöÑÂæÆ‰ø°Ê∏≤ÊüìÂô®
            renderer = WeixinRenderer()
            markdown_parser = mistune.create_markdown(
                renderer=renderer,
                plugins=[
                    'strikethrough',  # Âà†Èô§Á∫øÊîØÊåÅ
                    'footnotes',      # ËÑöÊ≥®ÊîØÊåÅ
                    'table',          # Ë°®Ê†ºÊîØÊåÅ
                    'url',            # Ëá™Âä®ÈìæÊé•
                    'task_lists',     # ‰ªªÂä°ÂàóË°®
                    'def_list',       # ÂÆö‰πâÂàóË°®
                    'abbr',           # Áº©ÂÜô
                    'mark',           # Ê†áËÆ∞È´ò‰∫Æ
                    'superscript',    # ‰∏äÊ†á
                    'subscript',      # ‰∏ãÊ†á
                ]
            )
            
            # ËΩ¨Êç¢markdown‰∏∫HTML
            html_content = markdown_parser(md_content)
            
            # Ê∑ªÂä†Êï¥‰ΩìÂÆπÂô®Ê†∑Âºè
            styled_html = f'''<div style="{renderer.styles['body']}">
{html_content}
</div>'''
            
            logger.info("‰ΩøÁî®MistuneËá™ÂÆö‰πâÊ∏≤ÊüìÂô®ÊàêÂäüËΩ¨Êç¢ÂÜÖÂÆπÔºåÂ∫îÁî®ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑‰ºòÂåñÊ†∑Âºè")
            return styled_html
            
        except Exception as e:
            logger.error(f"‰ΩøÁî®MistuneËΩ¨Êç¢Â§±Ë¥•ÔºåÂ∞ùËØïÂ§áÁî®ÊñπÊ°à: {e}")
            
            # Â§áÁî®ÊñπÊ°àÔºö‰ΩøÁî®ÂéüÊù•ÁöÑmarkdownÂ∫ì
            try:
                extensions = [
                    'markdown.extensions.extra',
                    'markdown.extensions.codehilite',
                    'markdown.extensions.smarty',
                    'markdown.extensions.nl2br',
                    'markdown.extensions.toc'
                ]
                html_content = markdown.markdown(md_content, extensions=extensions)
                logger.info("‰ΩøÁî®Â§áÁî®markdownÂ∫ìÊàêÂäüËΩ¨Êç¢ÂÜÖÂÆπ")
                return html_content
            except Exception as backup_error:
                logger.error(f"Â§áÁî®ËΩ¨Êç¢ÊñπÊ°à‰πüÂ§±Ë¥•: {backup_error}")
                # ÊúÄÂêéÁöÑÂ§áÁî®ÊñπÊ°àÔºöËøîÂõûÂ∏¶Âü∫Êú¨Ê†∑ÂºèÁöÑÂéüÂßãÂÜÖÂÆπ
                return f'<div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;"><p>{md_content}</p></div>'

   

    async def upload_draft(self, article: str, title: str, digest: str, media_id: str) -> Dict[str, str]:
        """‰∏ä‰º†ËçâÁ®ø"""
        token = await self.ensure_access_token()
        url = f"https://api.weixin.qq.com/cgi-bin/draft/add?access_token={token}"
        
        # È¢ÑÂ§ÑÁêÜÊñáÁ´†ÂÜÖÂÆπ
        article = self._preprocess_article(article)
        
        # ÂÅáËÆæÊñáÁ´†ÂÜÖÂÆπÂèØËÉΩÊòØMarkdownÊ†ºÂºèÔºåÂ∞ùËØïËΩ¨Êç¢‰∏∫HTMLÂπ∂Â∫îÁî®Ê®°Êùø
        try:
            html_content = self._md_to_html(article)
            logger.info("MarkdownÂÜÖÂÆπÂ∑≤ÊàêÂäüËΩ¨Êç¢‰∏∫Â∏¶Ê®°ÊùøÁöÑHTML")
        except Exception as e:
            logger.warning(f"MarkdownËΩ¨Êç¢Â§±Ë¥•Ôºå‰ΩøÁî®ÂéüÂßãÂÜÖÂÆπ: {e}")
        
        # È¢ÑÂ§ÑÁêÜÊ†áÈ¢òÂíåÊëòË¶Å
        if title and isinstance(title, str):
            title = self._preprocess_article(title)
        if digest and isinstance(digest, str):
            digest = self._preprocess_article(digest)

        articles = [{
            "title": title,
            "author": await self.config_manager.get("AUTHOR"),
            "digest": digest,
            "content": html_content,
            "thumb_media_id": media_id,
            "need_open_comment": 1 if await self.config_manager.get("NEED_OPEN_COMMENT") == "true" else 0,
            "only_fans_can_comment": 1 if await self.config_manager.get("ONLY_FANS_CAN_COMMENT") == "true" else 0
        }]

        try:
            # ËÆ∞ÂΩïËØ∑Ê±ÇÊó•Âøó
           # logger.debug("ÂæÆ‰ø°ËçâÁ®øËØ∑Ê±ÇÂÜÖÂÆπ: %s", json.dumps({"articles": articles}, ensure_ascii=False))
            
            # ÂáÜÂ§áËØ∑Ê±ÇÊï∞ÊçÆÂíåÂ§¥‰ø°ÊÅØ
            data = json.dumps({"articles": articles}, ensure_ascii=False, separators=(',', ':'))
            headers = {
                'Content-Type': 'application/json; charset=utf-8',
                'Accept': 'application/json; charset=utf-8'
            }
            
            # ÊòéÁ°ÆÊåáÂÆöÁºñÁ†ÅÊñπÂºèËøõË°åPOSTËØ∑Ê±Ç
            response = requests.post(
                url, 
                data=data.encode('utf-8'), 
                headers=headers
            )
            
            # Á°Æ‰øùÂìçÂ∫îÊòØUTF-8ÁºñÁ†Å
            if response.encoding.lower() != 'utf-8':
                response.encoding = 'utf-8'
                
            response_json = response.json()
            
            # ËÆ∞ÂΩïÂìçÂ∫îÊó•Âøó
            logger.debug("ÂæÆ‰ø°ËçâÁ®øÂìçÂ∫îÂÜÖÂÆπ: %s", json.dumps(response_json, ensure_ascii=False))
            
            if 'errcode' in response_json:
                raise Exception(f"‰∏ä‰º†ËçâÁ®øÂ§±Ë¥•: {response_json['errmsg']}")

            return {"media_id": response_json['media_id']}

        except Exception as error:
            logger.error("‰∏ä‰º†ÂæÆ‰ø°ËçâÁ®øÂ§±Ë¥•: %s", error)
            raise

    def _is_local_file(self, path: str) -> bool:
        """Âà§Êñ≠Ë∑ØÂæÑÊòØÂê¶‰∏∫Êú¨Âú∞Êñá‰ª∂"""
        return not (path.startswith('http://') or path.startswith('https://'))
    
    def _get_image_content_type(self, file_path: str) -> str:
        """Ê†πÊçÆÊñá‰ª∂Êâ©Â±ïÂêçËé∑ÂèñÂõæÁâáÂÜÖÂÆπÁ±ªÂûã"""
        ext = Path(file_path).suffix.lower()
        content_types = {
            '.jpg': 'image/jpeg',
            '.jpeg': 'image/jpeg', 
            '.png': 'image/png',
            '.gif': 'image/gif',
            '.bmp': 'image/bmp',
            '.webp': 'image/webp'
        }
        return content_types.get(ext, 'image/jpeg')

    async def upload_image(self, image_path: str) -> str:
        """‰∏ä‰º†ÂõæÁâáÂà∞ÂæÆ‰ø°ÔºåÊîØÊåÅÊú¨Âú∞Êñá‰ª∂ÂíåÁΩëÁªúURL"""
        if not image_path:
            return "SwCSRjrdGJNaWioRQUHzgF68BHFkSlb_f5xlTquvsOSA6Yy0ZRjFo0aW9eS3JJu_"

        token = await self.ensure_access_token()
        url = f"https://api.weixin.qq.com/cgi-bin/material/add_material?access_token={token}&type=image"

        try:
            # Âà§Êñ≠ÊòØÊú¨Âú∞Êñá‰ª∂ËøòÊòØÁΩëÁªúURL
            if self._is_local_file(image_path):
                # Â§ÑÁêÜÊú¨Âú∞ÂõæÁâáÊñá‰ª∂
                logger.info(f"‰∏ä‰º†Êú¨Âú∞ÂõæÁâáÊñá‰ª∂: {image_path}")
                
                # Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
                local_path = Path(image_path)
                if not local_path.exists():
                    raise FileNotFoundError(f"Êú¨Âú∞ÂõæÁâáÊñá‰ª∂‰∏çÂ≠òÂú®: {image_path}")
                
                if not local_path.is_file():
                    raise ValueError(f"Ë∑ØÂæÑ‰∏çÊòØÊñá‰ª∂: {image_path}")
                
                # Ê£ÄÊü•Êñá‰ª∂Êâ©Â±ïÂêç
                allowed_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'}
                if local_path.suffix.lower() not in allowed_extensions:
                    raise ValueError(f"‰∏çÊîØÊåÅÁöÑÂõæÁâáÊ†ºÂºè: {local_path.suffix}ÔºåÊîØÊåÅÁöÑÊ†ºÂºè: {', '.join(allowed_extensions)}")
                
                # ËØªÂèñÊú¨Âú∞Êñá‰ª∂
                with open(local_path, 'rb') as f:
                    image_content = f.read()
                
                # Ëé∑ÂèñÂÜÖÂÆπÁ±ªÂûãÂíåÊñá‰ª∂Âêç
                content_type = self._get_image_content_type(image_path)
                filename = local_path.name
                
                logger.info(f"Êú¨Âú∞ÂõæÁâáÊñá‰ª∂Â§ßÂ∞è: {len(image_content)} Â≠óËäÇÔºåÁ±ªÂûã: {content_type}")
                
            else:
                # Â§ÑÁêÜÁΩëÁªúURL
                logger.info(f"‰∏ãËΩΩÁΩëÁªúÂõæÁâá: {image_path}")
                response = requests.get(image_path, timeout=30)
                response.raise_for_status()
                image_content = response.content
                content_type = response.headers.get('content-type', 'image/jpeg')
                filename = 'image.jpg'
                
                logger.info(f"ÁΩëÁªúÂõæÁâá‰∏ãËΩΩÂÆåÊàêÔºåÂ§ßÂ∞è: {len(image_content)} Â≠óËäÇÔºåÁ±ªÂûã: {content_type}")

            # Ê£ÄÊü•ÂõæÁâáÂ§ßÂ∞èÔºàÂæÆ‰ø°ÈôêÂà∂10MBÔºâ
            max_size = 10 * 1024 * 1024  # 10MB
            if len(image_content) > max_size:
                raise ValueError(f"ÂõæÁâáÊñá‰ª∂ËøáÂ§ß: {len(image_content)} Â≠óËäÇÔºåË∂ÖËøáÂæÆ‰ø°ÈôêÂà∂ÁöÑ {max_size} Â≠óËäÇ")

            # ‰∏ä‰º†Âà∞ÂæÆ‰ø°
            files = {
                'media': (filename, image_content, content_type)
            }
            response = requests.post(url, files=files).json()

            if 'errcode' in response:
                raise Exception(f"‰∏ä‰º†ÂõæÁâáÂ§±Ë¥•: {response['errmsg']}")

            logger.info(f"ÂõæÁâá‰∏ä‰º†ÊàêÂäüÔºåmedia_id: {response['media_id']}")
            return response['media_id']

        except Exception as error:
            logger.error("‰∏ä‰º†ÂæÆ‰ø°ÂõæÁâáÂ§±Ë¥•: %s", error)
            raise

    async def upload_content_image(self, image_url: str, image_buffer: Optional[bytes] = None) -> str:
        """‰∏ä‰º†ÂõæÊñáÊ∂àÊÅØÂÜÖÁöÑÂõæÁâáËé∑ÂèñURL"""
        if not image_url:
            raise Exception("ÂõæÁâáURL‰∏çËÉΩ‰∏∫Á©∫")

        token = await self.ensure_access_token()
        url = f"https://api.weixin.qq.com/cgi-bin/media/uploadimg?access_token={token}"

        try:
            if image_buffer:
                image_content = image_buffer
            else:
                image_content = requests.get(image_url).content

            files = {
                'media': ('image.jpg', image_content, 'image/jpeg')
            }
            response = requests.post(url, files=files).json()

            if 'errcode' in response:
                raise Exception(f"‰∏ä‰º†ÂõæÊñáÊ∂àÊÅØÂõæÁâáÂ§±Ë¥•: {response['errmsg']}")

            return response['url']

        except Exception as error:
            logger.error("‰∏ä‰º†ÂæÆ‰ø°ÂõæÊñáÊ∂àÊÅØÂõæÁâáÂ§±Ë¥•: %s", error)
            raise

    async def publish(self, article: str, title: str, digest: str, media_id: str) -> Dict[str, Any]:
        """ÂèëÂ∏ÉÊñáÁ´†Âà∞ÂæÆ‰ø°"""
        try:
            # ËÆ∞ÂΩïÂéüÂßãÂÜÖÂÆπÈïøÂ∫¶ÔºåÁî®‰∫éË∞ÉËØï
            article_len = len(article) if article else 0
            logger.info(f"ÂéüÂßãÊñáÁ´†ÂÜÖÂÆπÈïøÂ∫¶: {article_len} Â≠óÁ¨¶")
            
            # È¢ÑÂ§ÑÁêÜÊñáÁ´†ÂÜÖÂÆπ
            article = self._preprocess_article(article)
            
            # ËÆ∞ÂΩïÂ§ÑÁêÜÂêéÂÜÖÂÆπÈïøÂ∫¶
            processed_len = len(article) if article else 0
            logger.info(f"Â§ÑÁêÜÂêéÊñáÁ´†ÂÜÖÂÆπÈïøÂ∫¶: {processed_len} Â≠óÁ¨¶")
            
            if processed_len > 0 and processed_len < article_len:
                logger.warning(f"ÊñáÁ´†ÂÜÖÂÆπÂú®È¢ÑÂ§ÑÁêÜ‰∏≠Ë¢´Êà™Êñ≠ÔºåÂéüÂßãÈïøÂ∫¶: {article_len}ÔºåÂ§ÑÁêÜÂêéÈïøÂ∫¶: {processed_len}")
            
            # ËÆ∞ÂΩïËØ∑Ê±ÇËØ¶ÊÉÖÔºå‰ΩÜÈôêÂà∂ÂÜÖÂÆπÈïøÂ∫¶ÔºåÈÅøÂÖçÊó•ÂøóËøáÂ§ß
            content_preview = article[:200] + "..." if len(article) > 200 else article
            logger.info(f"ÂèëÂ∏ÉÊ†áÈ¢ò: {title}")
            logger.info(f"ÂèëÂ∏ÉÊëòË¶Å: {digest}")
            logger.info(f"ÂèëÂ∏ÉÂõæÁâáID: {media_id}")
            logger.info(f"ÂèëÂ∏ÉÊñáÁ´†È¢ÑËßà: {content_preview}")
            
            # Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÁõ¥Êé•ÂèëÂ∏É
            direct_publish = await self.config_manager.get("DIRECT_PUBLISH")
            
            # ‰∏ä‰º†ËçâÁ®ø
            draft = await self.upload_draft(article, title, digest, media_id)
            logger.info(f"ËçâÁ®ø‰∏ä‰º†ÊàêÂäüÔºåmedia_id: {draft['media_id']}")
            
            # Â¶ÇÊûúÈÖçÁΩÆ‰∫ÜÁõ¥Êé•ÂèëÂ∏ÉÔºåÂàôË∞ÉÁî®ÂèëÂ∏ÉÊé•Âè£
            if direct_publish and direct_publish.lower() == "true":
                publish_result = await self.direct_publish(draft['media_id'])
                logger.info(f"Áõ¥Êé•ÂèëÂ∏ÉÊàêÂäüÔºåpublish_id: {publish_result['publish_id']}")
                return {
                    "publishId": publish_result['publish_id'],
                    "draftId": draft['media_id'],
                    "status": "publishing",
                    "publishedAt": datetime.now().isoformat(),
                    "platform": "weixin",
                    "url": f"https://mp.weixin.qq.com/s/{draft['media_id']}"
                }
            
            return {
                "publishId": draft['media_id'],
                "status": "draft",
                "publishedAt": datetime.now().isoformat(),
                "platform": "weixin",
                "url": f"https://mp.weixin.qq.com/s/{draft['media_id']}"
            }

        except Exception as error:
            logger.error("ÂæÆ‰ø°ÂèëÂ∏ÉÂ§±Ë¥•: %s", error)
            raise

    async def direct_publish(self, media_id: str) -> Dict[str, Any]:
        """Áõ¥Êé•ÂèëÂ∏ÉËçâÁ®ø
        
        Args:
            media_id: ËçâÁ®øÁöÑmedia_id
            
        Returns:
            Dict: ÂåÖÂê´ÂèëÂ∏ÉIDÁöÑÂ≠óÂÖ∏
        """
        try:
            token = await self.ensure_access_token()
            url = f"https://api.weixin.qq.com/cgi-bin/freepublish/submit?access_token={token}"
            
            data = {
                "media_id": media_id
            }
            
            # ÂáÜÂ§áËØ∑Ê±ÇÊï∞ÊçÆÂíåÂ§¥‰ø°ÊÅØ
            data_json = json.dumps(data, ensure_ascii=False)
            headers = {
                'Content-Type': 'application/json; charset=utf-8',
                'Accept': 'application/json; charset=utf-8'
            }
            
            # ÂèëÈÄÅËØ∑Ê±Ç
            response = requests.post(
                url, 
                data=data_json.encode('utf-8'), 
                headers=headers
            )
            
            # Á°Æ‰øùÂìçÂ∫îÊòØUTF-8ÁºñÁ†Å
            if response.encoding.lower() != 'utf-8':
                response.encoding = 'utf-8'
                
            response_json = response.json()
            
            # ËÆ∞ÂΩïÂìçÂ∫îÊó•Âøó
            logger.debug("ÂæÆ‰ø°ÂèëÂ∏ÉÂìçÂ∫îÂÜÖÂÆπ: %s", json.dumps(response_json, ensure_ascii=False))
            
            if 'errcode' in response_json and response_json['errcode'] != 0:
                error_msg = response_json.get('errmsg', 'Êú™Áü•ÈîôËØØ')
                error_code = response_json.get('errcode', -1)
                
                # ÁâπÊÆäÈîôËØØÁ†ÅÂ§ÑÁêÜ
                if error_code == 53503:
                    error_msg = "ËØ•ËçâÁ®øÊú™ÈÄöËøáÂèëÂ∏ÉÊ£ÄÊü•"
                elif error_code == 53504:
                    error_msg = "ÈúÄÂâçÂæÄÂÖ¨‰ºóÂπ≥Âè∞ÂÆòÁΩë‰ΩøÁî®ËçâÁ®ø"
                elif error_code == 53505:
                    error_msg = "ËØ∑ÊâãÂä®‰øùÂ≠òÊàêÂäüÂêéÂÜçÂèëË°®"
                
                raise Exception(f"ÂèëÂ∏ÉÂ§±Ë¥• (ÈîôËØØÁ†Å: {error_code}): {error_msg}")

            return {
                "publish_id": response_json.get('publish_id', ''),
                "msg_data_id": response_json.get('msg_data_id', '')
            }

        except Exception as error:
            logger.error("Áõ¥Êé•ÂèëÂ∏ÉÂæÆ‰ø°ÊñáÁ´†Â§±Ë¥•: %s", error)
            raise
            
    async def check_publish_status(self, publish_id: str) -> Dict[str, Any]:
        """Êü•ËØ¢ÂèëÂ∏ÉÁä∂ÊÄÅ
        
        Args:
            publish_id: ÂèëÂ∏É‰ªªÂä°ÁöÑID
            
        Returns:
            Dict: ÂåÖÂê´ÂèëÂ∏ÉÁä∂ÊÄÅÁöÑÂ≠óÂÖ∏
        """
        try:
            token = await self.ensure_access_token()
            url = f"https://api.weixin.qq.com/cgi-bin/freepublish/get?access_token={token}"
            
            data = {
                "publish_id": publish_id
            }
            
            # ÂáÜÂ§áËØ∑Ê±ÇÊï∞ÊçÆÂíåÂ§¥‰ø°ÊÅØ
            data_json = json.dumps(data, ensure_ascii=False)
            headers = {
                'Content-Type': 'application/json; charset=utf-8',
                'Accept': 'application/json; charset=utf-8'
            }
            
            # ÂèëÈÄÅËØ∑Ê±Ç
            response = requests.post(
                url, 
                data=data_json.encode('utf-8'), 
                headers=headers
            )
            
            # Á°Æ‰øùÂìçÂ∫îÊòØUTF-8ÁºñÁ†Å
            if response.encoding.lower() != 'utf-8':
                response.encoding = 'utf-8'
                
            response_json = response.json()
            
            # ËÆ∞ÂΩïÂìçÂ∫îÊó•Âøó
            logger.debug("ÂæÆ‰ø°ÂèëÂ∏ÉÁä∂ÊÄÅÊü•ËØ¢ÂìçÂ∫î: %s", json.dumps(response_json, ensure_ascii=False))
            
            if 'errcode' in response_json and response_json['errcode'] != 0:
                raise Exception(f"Êü•ËØ¢ÂèëÂ∏ÉÁä∂ÊÄÅÂ§±Ë¥•: {response_json['errmsg']}")

            # ÂèØËÉΩÁöÑÂèëÂ∏ÉÁä∂ÊÄÅÔºö0=ÊàêÂäü, 1=ÂèëÂ∏É‰∏≠, 2=ÂéüÂàõÂ§±Ë¥•, 3=Â∏∏ËßÑÂ§±Ë¥•, 4=Âπ≥Âè∞ÂÆ°Ê†∏‰∏çÈÄöËøá, 5=ÊàêÂäü‰ΩÜÊòØËΩ¨‰πâ‰∫ÜË°®ÊÉÖ
            status_map = {
                0: "published",
                1: "publishing",
                2: "failed_original",
                3: "failed_general", 
                4: "failed_audit",
                5: "published_emoji_escaped"
            }
            
            publish_status = response_json.get('publish_status', -1)
            
            return {
                "status": status_map.get(publish_status, "unknown"),
                "publish_id": publish_id,
                "publish_status": publish_status,
                "article_id": response_json.get('article_id', ''),
                "article_url": response_json.get('article_url', ''),
                "fail_reason": response_json.get('fail_reason', '')
            }

        except Exception as error:
            logger.error("Êü•ËØ¢ÂæÆ‰ø°ÂèëÂ∏ÉÁä∂ÊÄÅÂ§±Ë¥•: %s", error)
            raise

    async def validate_ip_whitelist(self) -> str | bool:
        """È™åËØÅÂΩìÂâçÊúçÂä°Âô®IPÊòØÂê¶Âú®ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÁöÑIPÁôΩÂêçÂçï‰∏≠"""
        try:
            await self.ensure_access_token()
            return True
        except Exception as error:
            error_msg = str(error)
            if "40164" in error_msg:
                import re
                match = re.search(r"invalid ip ([^ ]+)", error_msg)
                return match.group(1) if match else "Êú™Áü•IP"
            raise

    async def push_recommendation(self, content: str = None, title: str = None, digest: str = None, image_url: str = None) -> Dict[str, Any]:
        """Êé®ÈÄÅÂÜÖÂÆπÂà∞ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑
        
        Args:
            content: Ë¶ÅÊé®ÈÄÅÁöÑÂÜÖÂÆπÔºåÂ¶ÇÊûú‰∏∫NoneÂàô‰ªéÊñá‰ª∂ËØªÂèñ
            title: ÊñáÁ´†Ê†áÈ¢òÔºåÂ¶ÇÊûú‰∏∫NoneÂàô‰ΩøÁî®ÈªòËÆ§Ê†áÈ¢òÊàñ‰ªéÊñá‰ª∂ËØªÂèñ
            digest: ÊñáÁ´†ÊëòË¶ÅÔºåÂ¶ÇÊûú‰∏∫NoneÂàô‰ΩøÁî®ÈªòËÆ§ÊëòË¶ÅÊàñ‰ªéÊñá‰ª∂ËØªÂèñ
            image_url: Â∞ÅÈù¢ÂõæÁâáURLÔºåÂ¶ÇÊûú‰∏∫NoneÂàô‰ΩøÁî®ÈªòËÆ§ÂõæÁâá

        Returns:
            Dict[str, Any]: ÂåÖÂê´ÂèëÂ∏ÉÁä∂ÊÄÅÁöÑÂ≠óÂÖ∏
        """
        try:
            # Â¶ÇÊûúÊ≤°ÊúâÁõ¥Êé•Êèê‰æõÂÜÖÂÆπÔºåÂàô‰ªéÊñá‰ª∂ËØªÂèñ
            if content is None:
                # ËØªÂèñÊúÄÊñ∞ÁöÑÊäïËµÑÂª∫ËÆÆ
                recommendation_path = os.path.join(self.data_path, "investment_recommendation.json")
                
                try:
                    with open(recommendation_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        logger.info(f"ÊàêÂäüËØªÂèñÊäïËµÑÂª∫ËÆÆÊñá‰ª∂: {recommendation_path}")
                except FileNotFoundError:
                    logger.error(f"Êú™ÊâæÂà∞ÊäïËµÑÂª∫ËÆÆÊñá‰ª∂: {recommendation_path}")
                    return {
                        "status": "error",
                        "message": "Êú™ÊâæÂà∞ÊäïËµÑÂª∫ËÆÆÊñá‰ª∂"
                    }
                except json.JSONDecodeError:
                    logger.error(f"ÊäïËµÑÂª∫ËÆÆÊñá‰ª∂Ê†ºÂºèÈîôËØØ: {recommendation_path}")
                    return {
                        "status": "error",
                        "message": "ÊäïËµÑÂª∫ËÆÆÊñá‰ª∂Ê†ºÂºèÈîôËØØ"
                    }
                
                # Ëé∑ÂèñÂøÖË¶ÅÁöÑÂ≠óÊÆµ
                content = data.get('recommendation', '')
                if title is None:
                    title = data.get('title', 'ÊäïËµÑÂª∫ËÆÆÂàÜÊûêÊä•Âëä')
                if digest is None:
                    digest = data.get('digest', 'ÊäïËµÑÂª∫ËÆÆÂàÜÊûêÊä•Âëä')
                if image_url is None:
                    image_url = data.get('image_url', '')
            else:
                # ‰ΩøÁî®‰º†ÂÖ•ÁöÑÂèÇÊï∞ÊàñÈªòËÆ§ÂÄº
                if title is None:
                    title = 'Â∏ÇÂú∫ÂàÜÊûêÊä•Âëä'
                if digest is None:
                    digest = 'ÊúÄÊñ∞Â∏ÇÂú∫ÂàÜÊûêÊä•Âëä'
            
            # Ê£ÄÊü•ÂÜÖÂÆπÊòØÂê¶‰∏∫Á©∫
            if not content:
                logger.error("Êé®ÈÄÅÂÜÖÂÆπ‰∏∫Á©∫")
                return {
                    "status": "error",
                    "message": "Êé®ÈÄÅÂÜÖÂÆπ‰∏∫Á©∫"
                }
            
            # È¢ÑÂ§ÑÁêÜÂÜÖÂÆπÂíåÂ≠óÊÆµ
            content = self._preprocess_article(content)
            title = self._preprocess_article(title)
            digest = self._preprocess_article(digest)
            
            # ËÆ∞ÂΩïÂ§ÑÁêÜÁªìÊûú
            logger.info(f"Â§ÑÁêÜÂêéÊ†áÈ¢ò: {title}")
            logger.info(f"Â§ÑÁêÜÂêéÊëòË¶Å: {digest}")
            logger.info(f"Â§ÑÁêÜÂêéÂÜÖÂÆπÈïøÂ∫¶: {len(content)} Â≠óÁ¨¶")
            
            # ‰∏ä‰º†ÂõæÁâá
            default_img_url = "https://gips0.baidu.com/it/u=1690853528,2506870245&fm=3028&app=3028&f=JPEG&fmt=auto?w=1024&h=1024"
            img_path = image_url if image_url else default_img_url
            
            # Âà§Êñ≠ÊòØÊú¨Âú∞Êñá‰ª∂ËøòÊòØÁΩëÁªúURL
            if self._is_local_file(img_path):
                logger.info(f"ÂáÜÂ§á‰∏ä‰º†Êú¨Âú∞ÂõæÁâáÊñá‰ª∂: {img_path}")
            else:
                logger.info(f"ÂáÜÂ§á‰∏ä‰º†ÁΩëÁªúÂõæÁâá: {img_path}")
                
            media_id = await self.upload_image(img_path)
            logger.info(f"‰∏ä‰º†ÂõæÁâáÊàêÂäü: {media_id}")
            
            # Êé®ÈÄÅÂà∞ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑
            logger.info("ÂºÄÂßãÊé®ÈÄÅÂà∞ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑...")
            result = await self.publish(
                article=content,
                title=title,
                digest=digest,
                media_id=media_id
            )
            logger.info(f"Êé®ÈÄÅÁªìÊûú: {json.dumps(result, ensure_ascii=False)}")
            return result
            
        except Exception as error:
            logger.error("Êé®ÈÄÅÂÜÖÂÆπÊó∂ÂèëÁîüÈîôËØØ: %s", error)
            return {
                "status": "error",
                "message": f"Êé®ÈÄÅÂÜÖÂÆπÂ§±Ë¥•: {str(error)}"
            }

    def read_markdown_file(self, file_path: str) -> str:
        """ËØªÂèñÊú¨Âú∞ Markdown Êñá‰ª∂
        
        Args:
            file_path: Markdown Êñá‰ª∂Ë∑ØÂæÑ
            
        Returns:
            str: Êñá‰ª∂ÂÜÖÂÆπ
        """
        try:
            # Á°Æ‰øùÊñá‰ª∂Ë∑ØÂæÑÂ≠òÂú®
            path = Path(file_path)
            if not path.exists():
                raise FileNotFoundError(f"Êñá‰ª∂‰∏çÂ≠òÂú®: {file_path}")
            
            if not path.is_file():
                raise ValueError(f"Ë∑ØÂæÑ‰∏çÊòØÊñá‰ª∂: {file_path}")
            
            # Ê£ÄÊü•Êñá‰ª∂Êâ©Â±ïÂêç
            if path.suffix.lower() not in ['.md', '.markdown']:
                logger.warning(f"Êñá‰ª∂Êâ©Â±ïÂêç‰∏çÊòØ .md Êàñ .markdown: {file_path}")
            
            # ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            logger.info(f"ÊàêÂäüËØªÂèñ Markdown Êñá‰ª∂: {file_path}, ÂÜÖÂÆπÈïøÂ∫¶: {len(content)} Â≠óÁ¨¶")
            return content
            
        except Exception as error:
            logger.error(f"ËØªÂèñ Markdown Êñá‰ª∂Â§±Ë¥•: {error}")
            raise

    async def publish_from_markdown(self, md_file_path: str, title: str, digest: str = None, image_url: str = None) -> Dict[str, Any]:
        """‰ªé Markdown Êñá‰ª∂ÂèëÂ∏ÉÂà∞ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑
        
        Args:
            md_file_path: Markdown Êñá‰ª∂Ë∑ØÂæÑ
            title: ÊñáÁ´†Ê†áÈ¢ò
            digest: ÊñáÁ´†ÊëòË¶ÅÔºåÂ¶ÇÊûú‰∏∫NoneÂàô‰ªéÊ†áÈ¢òÁîüÊàê
            image_url: Â∞ÅÈù¢ÂõæÁâáURLÔºåÂ¶ÇÊûú‰∏∫NoneÂàô‰ΩøÁî®ÈªòËÆ§ÂõæÁâá
            
        Returns:
            Dict[str, Any]: ÂåÖÂê´ÂèëÂ∏ÉÁä∂ÊÄÅÁöÑÂ≠óÂÖ∏
        """
        try:
            # ËØªÂèñ Markdown Êñá‰ª∂
            logger.info(f"ÂºÄÂßãËØªÂèñ Markdown Êñá‰ª∂: {md_file_path}")
            content = self.read_markdown_file(md_file_path)
            
            # Â¶ÇÊûúÊ≤°ÊúâÊèê‰æõÊëòË¶ÅÔºå‰ªéÊ†áÈ¢òÁîüÊàê
            if digest is None:
                digest = f"{title} - ÊúÄÊñ∞ÂàÜÊûêÊä•Âëä"
            
            # È¢ÑÂ§ÑÁêÜÂÜÖÂÆπÂíåÂ≠óÊÆµ
            content = self._preprocess_article(content)
            title = self._preprocess_article(title)
            digest = self._preprocess_article(digest)
            
            # ËÆ∞ÂΩïÂ§ÑÁêÜÁªìÊûú
            logger.info(f"Â§ÑÁêÜÂêéÊ†áÈ¢ò: {title}")
            logger.info(f"Â§ÑÁêÜÂêéÊëòË¶Å: {digest}")
            logger.info(f"Â§ÑÁêÜÂêéÂÜÖÂÆπÈïøÂ∫¶: {len(content)} Â≠óÁ¨¶")
            
            # ‰∏ä‰º†ÂõæÁâá
            default_img_url = "https://gips0.baidu.com/it/u=1690853528,2506870245&fm=3028&app=3028&f=JPEG&fmt=auto?w=1024&h=1024"
            img_path = image_url if image_url else default_img_url
            
            # Âà§Êñ≠ÊòØÊú¨Âú∞Êñá‰ª∂ËøòÊòØÁΩëÁªúURL
            if self._is_local_file(img_path):
                logger.info(f"ÂáÜÂ§á‰∏ä‰º†Êú¨Âú∞ÂõæÁâáÊñá‰ª∂: {img_path}")
            else:
                logger.info(f"ÂáÜÂ§á‰∏ä‰º†ÁΩëÁªúÂõæÁâá: {img_path}")
                
            media_id = await self.upload_image(img_path)
            logger.info(f"‰∏ä‰º†ÂõæÁâáÊàêÂäü: {media_id}")
            
            # ÂèëÂ∏ÉÂà∞ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑
            logger.info("ÂºÄÂßãÂèëÂ∏ÉÂà∞ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑...")
            result = await self.publish(
                article=content,
                title=title,
                digest=digest,
                media_id=media_id
            )
            logger.info(f"ÂèëÂ∏ÉÁªìÊûú: {json.dumps(result, ensure_ascii=False)}")
            return result
            
        except Exception as error:
            logger.error("‰ªé Markdown Êñá‰ª∂ÂèëÂ∏ÉÂÜÖÂÆπÊó∂ÂèëÁîüÈîôËØØ: %s", error)
            return {
                "status": "error",
                "message": f"ÂèëÂ∏ÉÂÜÖÂÆπÂ§±Ë¥•: {str(error)}"
            }


async def main():
    """‰∏ªÂáΩÊï∞ - Áõ¥Êé•Âú®‰ª£Á†Å‰∏≠ÈÖçÁΩÆÂèÇÊï∞"""
    
    # È¶ñÂÖàÊ£ÄÊü•ÂíåÊòæÁ§∫ÁéØÂ¢ÉÂèòÈáèÁä∂ÊÄÅ
    print("üîç Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáèÁä∂ÊÄÅ:")
    env_vars_to_check = ['WEIXIN_APP_ID', 'WEIXIN_APP_SECRET', 'AUTHOR', 'DIRECT_PUBLISH', 'NEED_OPEN_COMMENT', 'ONLY_FANS_CAN_COMMENT']
    for var in env_vars_to_check:
        value = os.getenv(var)
        if value:
            # ÂØπÊïèÊÑü‰ø°ÊÅØËøõË°åËÑ±ÊïèÊòæÁ§∫
            if 'SECRET' in var:
                display_value = f"***{value[-4:]}" if len(value) > 4 else "***"
            elif 'APP_ID' in var:
                display_value = f"{value[:4]}***{value[-4:]}" if len(value) > 8 else value
            else:
                display_value = value
            print(f"   ‚úÖ {var}: {display_value}")
        else:
            print(f"   ‚ùå {var}: Êú™ËÆæÁΩÆ")
    print()
    
    # ==================== Âú®ËøôÈáå‰øÆÊîπ‰Ω†ÁöÑÂèÇÊï∞ ====================
    # Markdown Êñá‰ª∂Ë∑ØÂæÑÔºàÂøÖÂ°´Ôºâ
    md_file_path = "docs/qanything-qa.md"  # ËØ∑‰øÆÊîπ‰∏∫‰Ω†ÁöÑ Markdown Êñá‰ª∂Ë∑ØÂæÑ
    
    # ÊñáÁ´†Ê†áÈ¢òÔºàÂøÖÂ°´Ôºâ
    title = "LangGraph Human-in-the-Loop ÂÆåÊï¥ÊåáÂçó"  # ËØ∑‰øÆÊîπ‰∏∫‰Ω†ÁöÑÊñáÁ´†Ê†áÈ¢ò
    
    # ÊñáÁ´†ÊëòË¶ÅÔºàÂèØÈÄâÔºåÂ¶ÇÊûú‰∏∫ None ÂàôËá™Âä®ÁîüÊàêÔºâ
    digest = None  # ÂèØ‰ª•ËÆæÁΩÆ‰∏∫ "ËøôÊòØÊñáÁ´†ÊëòË¶Å" Êàñ‰øùÊåÅ None
    
    # Â∞ÅÈù¢ÂõæÁâáË∑ØÂæÑÔºàÂèØÈÄâÔºåÂ¶ÇÊûú‰∏∫ None Âàô‰ΩøÁî®ÈªòËÆ§ÂõæÁâáÔºâ
    # ÊîØÊåÅÊú¨Âú∞ÂõæÁâáÊñá‰ª∂Ë∑ØÂæÑÔºàÂ¶Ç "./images/cover.jpg"ÔºâÂíåÁΩëÁªúURLÔºàÂ¶Ç "https://example.com/image.jpg"Ôºâ
    image_url = "docs/ai-image.png"  # ÂèØ‰ª•ËÆæÁΩÆ‰∏∫Êú¨Âú∞ÂõæÁâáË∑ØÂæÑÊàñÁΩëÁªúURLÔºåÊàñ‰øùÊåÅ None
    
    # ÊòØÂê¶Ê£ÄÊü•ÈÖçÁΩÆÂíåIPÁôΩÂêçÂçïÔºàÂèØÈÄâÔºâ
    check_config = True  # ËÆæÁΩÆ‰∏∫ True Êù•Ê£ÄÊü•ÈÖçÁΩÆ
    # =========================================================
    
    # ÂàõÂª∫ÂèëÂ∏ÉÂô®ÂÆû‰æã
    publisher = WXPublisher()
    
    try:
        # Ê£ÄÊü•ÈÖçÁΩÆÔºàÂèØÈÄâÔºâ
        if check_config:
            logger.info("Ê£ÄÊü•ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÈÖçÁΩÆÂíåIPÁôΩÂêçÂçï...")
            ip_result = await publisher.validate_ip_whitelist()
            if ip_result is True:
                logger.info("‚úÖ IPÁôΩÂêçÂçïÈ™åËØÅÈÄöËøá")
            else:
                logger.warning(f"‚ö†Ô∏è IPÁôΩÂêçÂçïÈ™åËØÅÂ§±Ë¥•ÔºåÂΩìÂâçIP: {ip_result}")
                print(f"Ë≠¶Âëä: ÂΩìÂâçÊúçÂä°Âô®IP ({ip_result}) ÂèØËÉΩ‰∏çÂú®ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÁöÑIPÁôΩÂêçÂçï‰∏≠")
                print("ËØ∑Âú®ÂæÆ‰ø°ÂÖ¨‰ºóÂπ≥Âè∞ÂêéÂè∞Ê∑ªÂä†Ê≠§IPÂà∞ÁôΩÂêçÂçï")
                
                # ËØ¢ÈóÆÊòØÂê¶ÁªßÁª≠
                continue_publish = input("ÊòØÂê¶ÁªßÁª≠ÂèëÂ∏ÉÔºü(y/N): ").strip().lower()
                if continue_publish not in ['y', 'yes']:
                    print("ÂèñÊ∂àÂèëÂ∏É")
                    return
        
        # Ê£ÄÊü•ÂøÖË¶ÅÁöÑÁéØÂ¢ÉÂèòÈáè
        required_env_vars = ['WEIXIN_APP_ID', 'WEIXIN_APP_SECRET']
        missing_vars = []
        
        for var in required_env_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"Áº∫Â∞ëÂøÖË¶ÅÁöÑÁéØÂ¢ÉÂèòÈáè: {', '.join(missing_vars)}")
            print("‚ùå Áº∫Â∞ëÂøÖË¶ÅÁöÑÁéØÂ¢ÉÂèòÈáè:")
            for var in missing_vars:
                print(f"   {var}")
            print("\nËØ∑ËÆæÁΩÆ‰ª•‰∏ãÁéØÂ¢ÉÂèòÈáè:")
            print("export WEIXIN_APP_ID='‰Ω†ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑AppID'")
            print("export WEIXIN_APP_SECRET='‰Ω†ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑AppSecret'")
            print("export AUTHOR='‰ΩúËÄÖÂêçÁß∞'  # ÂèØÈÄâ")
            print("export DIRECT_PUBLISH='true'  # ÂèØÈÄâÔºåÊòØÂê¶Áõ¥Êé•ÂèëÂ∏É")
            print("export NEED_OPEN_COMMENT='true'  # ÂèØÈÄâÔºåÊòØÂê¶ÂºÄÂêØËØÑËÆ∫")
            print("export ONLY_FANS_CAN_COMMENT='false'  # ÂèØÈÄâÔºåÊòØÂê¶‰ªÖÁ≤â‰∏ùÂèØËØÑËÆ∫")
            return
        
        # ÊòæÁ§∫ÈÖçÁΩÆ‰ø°ÊÅØ
        logger.info("ÂΩìÂâçÈÖçÁΩÆ:")
        logger.info(f"  MarkdownÊñá‰ª∂: {md_file_path}")
        logger.info(f"  ÊñáÁ´†Ê†áÈ¢ò: {title}")
        logger.info(f"  ÊñáÁ´†ÊëòË¶Å: {digest or '(‰ªéÊ†áÈ¢òËá™Âä®ÁîüÊàê)'}")
        logger.info(f"  Â∞ÅÈù¢ÂõæÁâá: {image_url or '(‰ΩøÁî®ÈªòËÆ§ÂõæÁâá)'}")
        logger.info(f"  ‰ΩúËÄÖ: {os.getenv('AUTHOR', 'Êú™ËÆæÁΩÆ')}")
        logger.info(f"  Áõ¥Êé•ÂèëÂ∏É: {os.getenv('DIRECT_PUBLISH', 'false')}")
        
        # ÂèëÂ∏ÉÊñáÁ´†
        print("üöÄ ÂºÄÂßãÂèëÂ∏ÉÂà∞ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑...")
        result = await publisher.publish_from_markdown(
            md_file_path=md_file_path,
            title=title,
            digest=digest,
            image_url=image_url
        )
        
        # ÊòæÁ§∫ÁªìÊûú
        if result.get('status') == 'error':
            print(f"‚ùå ÂèëÂ∏ÉÂ§±Ë¥•: {result.get('message')}")
            sys.exit(1)
        else:
            print("‚úÖ ÂèëÂ∏ÉÊàêÂäü!")
            print(f"   Áä∂ÊÄÅ: {result.get('status')}")
            print(f"   Âπ≥Âè∞: {result.get('platform')}")
            print(f"   ÂèëÂ∏ÉÊó∂Èó¥: {result.get('publishedAt')}")
            
            if result.get('status') == 'draft':
                print("   üìù ÊñáÁ´†Â∑≤‰øùÂ≠ò‰∏∫ËçâÁ®øÔºåËØ∑Âà∞ÂæÆ‰ø°ÂÖ¨‰ºóÂπ≥Âè∞ÊâãÂä®ÂèëÂ∏É")
            elif result.get('status') == 'publishing':
                print("   üì§ ÊñáÁ´†Ê≠£Âú®ÂèëÂ∏É‰∏≠...")
                if result.get('publishId'):
                    print(f"   ÂèëÂ∏ÉID: {result.get('publishId')}")
            
            if result.get('url'):
                print(f"   ÈìæÊé•: {result.get('url')}")
    
    except KeyboardInterrupt:
        print("\n‚ùå Áî®Êà∑ÂèñÊ∂àÊìç‰Ωú")
        sys.exit(1)
    except Exception as error:
        logger.error(f"ÂèëÂ∏ÉËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {error}")
        print(f"‚ùå ÂèëÂ∏ÉÂ§±Ë¥•: {error}")
        sys.exit(1)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 